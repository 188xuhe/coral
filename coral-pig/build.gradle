apply plugin: 'li-java'
apply plugin: 'maven-publish'
apply plugin: 'shade'


dependencies {
  compile spec.product.'coral-calcite'.'coral-calcite'

  compile spec.external.'javax-annotation'
  // NOTE: jline is needed as testCompile for PigUnit tests because it is missing from Pig runtime
  testCompile 'jline:jline:0.9.94'

  compile project(path: ':coral-hive', configuration: 'shadow')

  testCompile(spec.product.pig.pig) { transitive = false }
  testCompile(spec.product.pig.pigunit) { transitive = false }

  testCompile(spec.product.hive.'hive-exec') {
    exclude group: 'org.apache.avro', module: 'avro-tools'
    // These exclusions are required to prevent duplicate classes since we include
    // shaded jar above
    exclude group: 'org.apache.calcite', module: 'calcite-core'
    exclude group: 'org.apache.calcite', module: 'calcite-avatica'
    exclude group: 'jline', module: 'jline'
  }
}

def pomPath = "$buildDir/${name}.pom"
model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$pomPath")
  }

  tasks.jar {
    dependsOn tasks.generatePomFileForMavenJavaPublication
  }
}

// Create a fat jar for Pig to pull.
shadeJar {
  doNotShade "com/linkedin/coral/**"
  // force the JDBC classloader to use the shaded version of the JDBC Calcite driver
  relocate "jdbc:calcite:", "jdbc:coralpig:"
  // shade with prefix "coral_pig" for coral integration purposes.
  shadePrefix "coral_pig"
  mergeServiceFiles()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

// need to explicitly set this because we are generating pom files
generateModuleArtifactSpec.defaultArtifact = jar
artifacts {
  archives file: file("$pomPath"), name: "$name", type: "pom"
  archives jar, javadocJar, sourcesJar
}