apply plugin: 'li-java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
  compile spec.product.'coral-calcite'.'coral-calcite'

  compile (spec.product.hive.'hive-metastore') {
    exclude group: 'com.linkedin.metastore-autometrics', module: 'autometrics-reporter'
    exclude group: 'com.linkedin.metastore-audit', module: 'metastore-audit-logging'
    // avro-tools brings in whole bunch of hadoop classes causing duplicates and conflicts
    exclude group: 'org.apache.avro', module: 'avro-tools'
  }
  compile spec.product.hadoop.'hadoop-common'

  // required for hiveSQL parser code
  compile spec.external.'antlr-runtime'

  testCompile (spec.product.hive.'hive-exec') {
    exclude group: 'org.apache.avro', module: 'avro-tools'
    // These exclusions are required to prevent duplicate classes since we include
    // shaded jar above
    exclude group: 'org.apache.calcite', module: 'calcite-core'
    exclude group: 'org.apache.calcite', module: 'calcite-avatica'
  }
}

// TODO: this is boilerplate code repeated in all modules. Can we move this to parent build subProjects ?
def pomPath = "$buildDir/${name}.pom"

model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$pomPath")
  }

  tasks.jar {
    dependsOn tasks.generatePomFileForMavenJavaPublication
  }
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

// need to explicitly set this because we are generating pom files
generateModuleArtifactSpec.defaultArtifact = jar

// need to create a seprate fat shadowJar for dali-spark integration purpose
shadowJar {
  classifier = 'all'
  zip64 true
}

artifacts {
  archives file: file(pomPath), name: "$name", type: "pom"
  archives shadowJar, jar, javadocJar, sourcesJar
}
