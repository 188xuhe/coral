apply plugin: 'li-java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {

  // Adding this dependency as compile  project(path: ':coral-calcite', configuration: 'shadow')
  // does not work well with IntelliJ. It break both, compilation and running of tests.
  // Adding file based dependency makes IntelliJ happy. `builtBy` ensures that the shaded calcite
  // jar is generated before running compile for this project.
  // One suggestion was to add both - file() as below and compile  project(path: ':coral-calcite', configuration: 'shadow').
  // That solves the compilation issue in intellij but break running of tests in IntelliJ. The compile directive
  // will cause IntelliJ to transitively bring dependent jars on the classpath. This causes duplicate jars and fails test

  compile files("${project(':coral-calcite').buildDir.absolutePath}/libs/coral-calcite-${version}.jar") {
    builtBy project(':coral-calcite').tasks.getByName('shadowJar')
  }

  compile (spec.product.hive.'hive-metastore') {
    exclude group: 'com.linkedin.metastore-autometrics', module: 'autometrics-reporter'
    exclude group: 'com.linkedin.metastore-audit', module: 'metastore-audit-logging'
    // avro-tools brings in whole bunch of hadoop classes causing duplicates and conflicts
    exclude group: 'org.apache.avro', module: 'avro-tools'
  }
  compile spec.product.hadoop.'hadoop-common'

  // required for hiveSQL parser code
  compile spec.external.'antlr-runtime'

  testCompile (spec.product.hive.'hive-exec') {
    exclude group: 'org.apache.avro', module: 'avro-tools'
    // These exclusions are required to prevent duplicate classes since we include
    // shaded jar above
    exclude group: 'org.apache.calcite', module: 'calcite-core'
    exclude group: 'org.apache.calcite', module: 'calcite-avatica'
  }
}

// TODO: this is boilerplate code repeated in all modules. Can we move this to parent build subProjects ?
def pomPath = "$buildDir/${name}.pom"

model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$pomPath")
  }

  tasks.jar {
    dependsOn tasks.generatePomFileForMavenJavaPublication
  }
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      // since we use file() dependency on shaded jar, we need to explicitly
      // add coral-calcite dependency in pom
      pom.withXml {
        def depRoot = asNode().dependencies[0]
        if (depRoot == null) {
          depRoot = asNode().appendNode("dependencies")
        }
        def dep = asNode().dependencies[0].appendNode("dependency")
        dep.appendNode("groupId", project.group)
        dep.appendNode("artifactId", project(":coral-calcite").name)
        dep.appendNode("version", version)
      }
    }
  }
}

// need to explicitly set this because we are generating pom files
generateModuleArtifactSpec.defaultArtifact = jar

// need to create a seprate fat shadowJar for dali-spark integration purpose
shadowJar {
  classifier = 'all'
  zip64 true
}

artifacts {
  archives file: file(pomPath), name: "$name", type: "pom"
  archives shadowJar, jar, javadocJar, sourcesJar
}
